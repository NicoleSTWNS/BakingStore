@using System.Linq.Expressions;
@inject ToastService toast;
@typeparam T where T : new()

@PageTitle

<button class="btn-primary" @onclick="() => OnCreateAsync()">Add</button>
<Form OnSubmit="OnSubmit" @bind-Show="showDialog" OnCancel="() => input = Activator.CreateInstance<T>()" @ref="form">
    @Form(input)
</Form>
<DeleteDialog @bind-Show="showDeleteDialog" OnSubmit="() => DeleteAsync()" DialogTitle="Delete UOM"></DeleteDialog>

@ListView(Page.Data)

@code {
    [Parameter]
    public RenderFragment PageTitle { get; set; }

    [Parameter]
    public RenderFragment<ICollection<T>> ListView { get; set; }

    [Parameter]
    public RenderFragment<T> Form { get; set; }

    [Parameter]
    public ICrudService<T> Repository { get; set; }

    [Parameter]
    public PageResult<T> Page { get; set; } = new PageResult<T>();

    [Parameter]
    public EventCallback<PageResult<T>> PageChanged { get; set; }

    [Parameter]
    public PageRequest<T> Request { get; set; } = new PageRequest<T>();

    [Parameter]
    public bool NoInitFetch { get; set; } = false;

    [Parameter]
    public EventCallback OnClickCreate { get; set; } = default(EventCallback);

    private Form form;
    private T input;
    private T toDelete;
    private bool showDialog = false;
    private bool showDeleteDialog = false;
    private FormConstants formMode = FormConstants.Create;

    protected override async Task OnInitializedAsync()
    {
        input = Activator.CreateInstance<T>();
        if (!NoInitFetch)
            await FetchAsync();
    }

    public async Task OnCreateAsync()
    {
		await OnClickCreate.InvokeAsync();
        input = Activator.CreateInstance<T>();
        formMode = FormConstants.Create;
        showDialog = true;
    }

    public async Task OnEditAsync(T e)
    {
        formMode = FormConstants.Edit;
        input = (T)Activator.CreateInstance(typeof(T), e);
        showDialog = true;
    }

    public async Task OnDeleteAsync(T e)
    {
        toDelete = (T)Activator.CreateInstance(typeof(T), e);
        showDeleteDialog = true;
    }

    public async Task FetchAsync()
    {
        try
        {
            Page = await Repository.FetchPageAsync(Request);
            await PageChanged.InvokeAsync(Page);
        } 
        catch (Exception e)
        {
            toast.NotifyFailedAsync("Failed on fetching data: " + e.Message);
        }
    }

    public async Task DeleteAsync()
    {
        try
        {
            await Repository.DeleteAsync(toDelete);
            toast.NotifySucessAsync("Successfully deleted data");
        } 
        catch (Exception e) 
        {
            toast.NotifyFailedAsync("Failed to delete: " + e.Message);
        }

        await FetchAsync();
        showDeleteDialog = false;
    }

    public async Task OnSubmit()
    {
        if (formMode == FormConstants.Create)
            await AddAsync();
        else if (formMode == FormConstants.Edit)
            await EditAsync();

        input = Activator.CreateInstance<T>();
        await form.Hide();
    }

    public async Task EditAsync()
    {
        try 
        {
            await Repository.UpdateAsync(input);
            toast.NotifySucessAsync("Successfully edited data");
        }
        catch (Exception e)
        {
            toast.NotifyFailedAsync("Failed to edit: " + e.Message);
        }
        await FetchAsync();
    }

    public async Task AddAsync()
    {
        try 
        {
            await Repository.AddAsync(input);
            toast.NotifySucessAsync("Successfully added data");
        }
        catch (Exception e)
        {
            toast.NotifyFailedAsync("Failed to add: " + e.Message);
        }
        await FetchAsync();
    }
}
