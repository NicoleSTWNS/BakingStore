@if (Show)
{
	<div 
		class=" 
			absolute 
			top-0 
			left-0 
			z-[1] 
			h-full
			w-full
			overflow-y-auto 
			overflow-x-wrap
			outline-none 
			flex
			justify-center
			items-center
			@(animateIn ? "fade-in" : "fade-out")
		"
	>
		<main class="block rounded-lg p-6 bg-violet-100 drop-shadow-2xl">
			<h3 class="text-h3 font-bold">@Title</h3>
			<form @onsubmit="async () => await OnSubmit.InvokeAsync()" class="flex flex-col gap-y-4 my-5 items-end flex-wrap">
				@ChildContent
				<div class="self-end mt-4">
					<button type="submit" class="btn-primary">Submit</button>
					<button class="btn-danger" @onclick="() => Cancel()" type="button">Cancel</button>
				</div>
			</form>
		</main>
	</div>
}

@code {
	[Parameter]
	public string Title { get; set; }

	[Parameter]
	public bool Show { get; set; } = false;

	[Parameter]
	public EventCallback<bool> ShowChanged { get; set; }

	[Parameter]
	public EventCallback OnSubmit { get; set; }

	[Parameter]
	public EventCallback OnCancel { get; set; }

	[Parameter]
	public UOM Entity { get; set; } = new UOM();

	[Parameter]
	public RenderFragment ChildContent { get; set; }

	private bool animateIn = true;

	private async Task Cancel()
	{
		animateIn = false;
		StateHasChanged();
		await Task.Delay(300);

		await ShowChanged.InvokeAsync(false);
		await OnCancel.InvokeAsync();
		animateIn = true;
	}

	public async Task Hide()
	{
		await Cancel();
	}

	public async Task ShowDialog()
	{
		animateIn = true;
		await ShowChanged.InvokeAsync(true);
	}
}
